* General
Make backups in a centralized place to reduce clutter everywhere
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

Remove all the clutter
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)


  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

But add the time in 24hr format
#+BEGIN_SRC emacs-lisp
  (display-time-mode 1)
  (setq display-time-24hr-format 1)
  (display-time-mode -1)
#+END_SRC

Toggle time in fullscreen
#+BEGIN_SRC emacs-lisp
  (defun joh/toggle-display-time ()
    (if display-time-mode
	(display-time-mode -1)
      (display-time-mode 1)))

  (advice-add 'toggle-frame-fullscreen :after 'joh/toggle-display-time)
#+END_SRC

Setup MELPA
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  ;; Taken directly from the MELPA website itself
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                      (not (gnutls-available-p))))
         (proto (if no-ssl "http" "https")))
    (when no-ssl
      (warn "\
  Your version of Emacs does not support SSL connections,
  which is unsafe because it allows man-in-the-middle attacks.
  There are two things you can do about this warning:
  1. Install an Emacs version that does support SSL and be safe.
  2. Remove this warning from your init file so you won't see it again."))
    ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
    (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
    ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
    (when (< emacs-major-version 24)
      ;; For important compatibility libraries like cl-lib
      (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
  (package-initialize)
#+END_SRC

Setup use-package
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

For now I do not need this
#+BEGIN_SRC emacs-lisp
  ;; (use-package gnu-elpa-keyring-update
  ;;   :ensure t)
#+END_SRC


Change all confirmation prompts to short ones
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

C-x k now kills the current buffer
#+BEGIN_SRC emacs-lisp
  (defun joh/kill-this-buffer ()
    "Kills the current buffer without the problems given by kill-this-buffer"
    (interactive)
    (kill-buffer (current-buffer)))

  (global-set-key (kbd "C-x k") 'joh/kill-this-buffer)
#+END_SRC

A shortcut command to open directly the config file
#+BEGIN_SRC emacs-lisp
  (defun joh/load-config-file ()
    "Load the config file"
    (interactive)
    (find-file "~/.emacs.d/config.org"))
#+END_SRC

C-x w now kills only the frame (formerly C-x 5 0)
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x w") 'delete-frame)
#+END_SRC

Run emacs maximized by default
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

** Dired
Show file size in human readable format
#+begin_src emacs-lisp
  (customize-set-variable 'dired-listing-switches "-alh")
#+end_src
   
* Theme
** Light theme (now using doom-themes !)
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Setting copied over from https://github.com/hlissner/emacs-doom-themes#doom-emacs
    (setq doom-themes-enable-bold t
	  doom-themes-enable-italic t)
    (load-theme 'doom-solarized-light t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config)

    ;; Use a bigger font size
    (set-face-attribute 'default nil :height 120))

#+END_SRC

** Dark theme (disabled)
#+BEGIN_SRC emacs-lisp
  ;; (load-theme 'misterioso)
#+END_SRC

** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

* Ivy
I'll try with Ivy for now, maybe switch to Helm later if needed
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :config
    (ivy-mode 1))
#+END_SRC

Also counsel, to have keybinds displayed in M-x (among other things)
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :after ivy
    :config (counsel-mode 1))
#+END_SRC

* Try, which key and other misc stuff
Try
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

Which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))
#+END_SRC

* Org mode

#+begin_src emacs-lisp
  (customize-set-variable 'org-archive-location "~/Documents/org/archive.org::* From %s")
#+end_src

#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq org-structure-template-alist
	(cons '("el" . "src emacs-lisp")
	 ;;'("el" . "src emacs-lisp") this is only working in new versions
	      org-structure-template-alist))
#+END_SRC

TODO workflow: TODO -> WAIT -> DONE
#+begin_src emacs-lisp
  (customize-set-variable 'org-todo-keywords '((sequence "TODO" "WAIT" "|" "DONE")))
#+end_src

Org bullet
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda ()
			       (org-bullets-mode 1))))
#+END_SRC

Org download (WIP)
#+begin_src emacs-lisp
  (use-package org-download
    :ensure t
    :config
    (add-hook 'dired-mode-hook 'org-download-enable)

    (setq org-download-image-dir "./imgs")
    (setq org-download-heading-lvl nil)
    ;; put here has it makes less sense without org-download
    (setq org-startup-with-inline-images t)
    :bind (:map org-mode-map
		("C-c s" . org-download-screenshot)
		("C-c c" . org-download-clipboard)))
#+end_src

Remove temporary latex file for PDF production
#+begin_src emacs-lisp
  (advice-add 'org-latex-compile :after #'delete-file)
#+end_src

** Latex Macros
All of the things for the preview to work correctly
#+begin_src emacs-lisp
  (setq org-preview-latex-default-process 'imagemagick)
  (setq org-latex-packages-alist '("\\usepackage{braket}"
				   "\\newcommand{\\dd}{\\mathrm{d}}"
				   "\\newcommand{\\diff}[2]{\\frac{\\dd #1}{\\dd #2}}"
				   "\\newcommand{\\pdiff}[2]{\\frac{\\partial #1}{\\partial #2}}"))
#+end_src

#+begin_src emacs-lisp
  (defun joh/insert-latex-inline ()
    "A template to insert empty inline equations."
    (interactive)
    (insert "\\(\\)")
    (backward-char 2))

  (defun joh/insert-latex-displayed ()
    "A template to insert empty displayed equations."
    (interactive)  
    (insert "\\begin{equation*}\n\n\\end{equation*}")
    (forward-line -1))

  (defun joh/insert-latex-equation ()
    "A template to insert empty equation environments."
    (interactive)  
    (insert "\\begin{equation}\n\n\\end{equation}")
    (forward-line -1))

  (global-set-key (kbd "C-$") 'joh/insert-latex-inline)
  (global-set-key (kbd "<f7>") 'joh/insert-latex-displayed)
  (global-set-key (kbd "C-<f7>") 'joh/insert-latex-equation)
#+end_src

** Website generation
#+begin_src emacs-lisp
  (use-package htmlize
    :ensure t)
#+end_src

* Org-roam [WIP]
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :bind (("<f8>" . org-roam-find-file)
	   ("C-<f8>" . org-roam-insert))
    :config
    (setq org-roam-directory "~/org-roam")
    ;; use ivy for completion
    (setq org-roam-completion-system 'ivy)
    (add-hook 'after-init-hook 'org-roam-mode)
    ;; Configure the template system
    (setq org-roam-capture-templates
	  '(("d" "default" plain #'org-roam-capture--get-point
	     "%?"
	     :file-name "${slug}"
	     :head "#+title: ${title}\n#+startup: latexpreview\n\n#+date: %T\n- tags :: \n\n"
	     :unnarrowed t)
	    ("s" "structure-note" plain #'org-roam-capture--get-point
	     "%?"
	     :file-name "${slug}"
	     :head "#+title: ${title}\n\n#+date: %T\n#+roam_tags: structure-note\n- tags :: \n\n"
	     :unnarrowed t)))
    ;; Add org-roam-protocol
    (require 'org-roam-protocol)
    (setq org-roam-capture-ref-templates
	  '(("r" "roam-ref" plain #'org-roam-capture--get-point
	     "%?"
	     :file-name "${slug}"
	     :head "#+title: ${title}\n#+startup: latexpreview\n\n#+roam_key: ${ref}\n#+roam_tags: literature-note website \n#+date: %T\n- tags :: \n\n"
	     :unnarrowed t)))
    (use-package org-roam-server
      :ensure t
      :config
      (org-roam-server-mode)))
#+end_src
* Anki-editor
#+begin_src emacs-lisp
  ;; For now the MELPA package has bugs
  (use-package anki-editor
    :load-path "~/.emacs.d/src/anki-editor/"
    :ensure t
    :init
    (defvar anki-editor-mode-map (make-sparse-keymap))
    (add-to-list 'minor-mode-map-alist (cons 'anki-editor-mode
					     anki-editor-mode-map))
    :bind (:map anki-editor-mode-map
		("C-c i" . anki-editor-insert-note)
		("C-c p" . anki-editor-push-notes)))
#+end_src
* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status))
#+END_SRC
* CC Mode
#+BEGIN_SRC emacs-lisp
  (setq c-default-style "bsd")
  (setq c-basic-offset 4)
  (setq indent-tabs-mode nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-common-hook (lambda () (local-set-key (kbd "C-c o") 'ff-find-other-file)))
#+END_SRC

Following [[https://www.youtube.com/watch?v=HTUE03LnaXA][this tutorial]] for this:
#+begin_src emacs-lisp
  ;; (use-package auto-complete
  ;;   :ensure t
  ;;   :config
  ;;   (ac-config-default))
#+end_src

#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-reload-all)
    (add-hook 'c-mode-common-hook #'yas-minor-mode))

  (use-package yasnippet-snippets
    :ensure t)
#+end_src

* Python
Switch to Python 3 by default
#+BEGIN_SRC emacs-lisp
  (setq python-shell-interpreter "python3")
#+END_SRC

Configure jedi 
#+BEGIN_SRC emacs-lisp
  (use-package jedi 
    :ensure t
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    ;; TODO jedi AC setup ??
    )
#+END_SRC

* Paredit
Seems pretty cool
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :config
    (autoload 'enable-paredit-mode "paredit" "Turn on pseudo structural editing of Lisp code." t)
    (add-to-list 'paredit-space-for-delimiter-predicates
		 (lambda (endp delimiter)
		   (not (eq major-mode 'python-mode))))
    (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    (add-hook 'scheme-mode-hook           #'enable-paredit-mode))
#+END_SRC

* Smartparens
Even though I use *paredit* for lispy languages, I prefer having
*smartparens* for the rest.

#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (add-hook 'c-mode-common-hook #'smartparens-mode)
    (add-hook 'python-mode-hook #'smartparens-mode)
    (add-hook 'inferior-python-mode-hook #'smartparens-mode)
    (add-hook 'js-mode-hook #'smartparens-mode)
    (add-hook 'f90-mode-hook #'smartparens-mode)
    (add-hook 'julia-mode-hook #'smartparens-mode))
#+end_src

* Iedit
Could be handy sometimes
#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :ensure t)
#+END_SRC

* Common Lisp
Slime
#+BEGIN_SRC emacs-lisp
  (use-package slime
    :ensure t
    :config
    (setq inferior-lisp-program "/usr/bin/sbcl")
    (setq slime-contribs '(slime-fancy slime-quicklisp slime-asdf))
    (add-hook 'slime-repl-mode-hook (lambda () (paredit-mode +1)))
    ;; Stop SLIME's REPL from grabbing DEL,
    ;; which is annoying when backspacing over a '('
    (defun override-slime-repl-bindings-with-paredit ()
      (define-key slime-repl-mode-map
	(read-kbd-macro paredit-backward-delete-key) nil))
    (add-hook 'slime-repl-mode-hook 'override-slime-repl-bindings-with-paredit)

    (defun slime-enable-concurrent-hints ()
      (interactive)
      (setf slime-inhibit-pipelining nil)))
#+END_SRC

* Elfeed
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure t
    :config
    (custom-set-variables '(elfeed-search-title-max-width 130)))

  (use-package elfeed-org
    :ensure t
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/Documents/org/rssfeeds.org")))
#+END_SRC
* Deft [WIP]
#+begin_src emacs-lisp
  (use-package deft
    :ensure t
    :commands (deft)
    :config (setq deft-directory "~/Documents"
		  deft-extensions '("org")
		  deft-recursive t))
#+end_src

* Eshell [WIP]
Ensure the PATH is correct
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config (exec-path-from-shell-initialize))
#+end_src

* PHP Mode
#+begin_src emacs-lisp
  (use-package php-mode
    :ensure t
    :config (add-to-list 'auto-mode-alist '("\\.php\\'" . php-mode)))
#+end_src

* GLSL Mode
#+begin_src emacs-lisp
  (use-package glsl-mode
    :ensure t)
#+end_src
* Haskell mode
#+begin_src emacs-lisp
  (use-package haskell-mode
    :ensure t
    :config
    (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
    (add-hook 'haskell-mode-hook 'smartparens-mode))
#+end_src
* Julia mode
#+begin_src emacs-lisp
  (use-package julia-mode
    :ensure t)

  (use-package julia-repl
    :ensure t
    :config
    (add-hook 'julia-mode-hook 'julia-repl-mode))
#+end_src

* Assembly mode
#+begin_src emacs-lisp
  (defun asm-fix-indent ()
    (setq tab-always-indent (default-value 'tab-always-indent)))

  (add-hook 'asm-mode-hook #'asm-fix-indent)
#+end_src

* Ledger mode
#+begin_src emacs-lisp
  (use-package ledger-mode
    :ensure t)
#+end_src

* Gemini setup
** Editing
#+begin_src emacs-lisp
  (define-derived-mode gmi-mode text-mode "Gemini"
    "major mode for editing Gemini files"
    (setq truncate-lines nil)
    (setq fill-paragraph-function (lambda (&rest rest) t)))

  (add-to-list 'auto-mode-alist '("\\.gmi\\'" . gmi-mode))
#+end_src
** Browsing
#+begin_src emacs-lisp
  (use-package elpher
    :ensure t)
#+end_src

* Markdown mode
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t)
#+end_src
